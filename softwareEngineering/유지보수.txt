

# 유지보수

- 소프트웨어의 수명을 연장시키는것.

    하자보수

    기능개선

    새로운 환경으로의 적응

    예방적 가치 



# 소프트웨어 역공학

- 원시 코드를 이용하여 원시코드 이상의 추상화된 표현으로 나타내는것으로 코드를 분석하는과정
> 역공학을 통해 프로그램으로부터 프로그램구조, 자료구조. 모듈들 사이의 관계등을
상세한 설계 정보를 끌어낼수 있음.


# 재공학

- 설계 정보를 끌어내는것 뿐이 아닌, 보다 나은 시스템을 만드는거을 의미
    신규기능 추가
    성능 향상
    재구성하여 변경 용이한 시스템 제작
    보다 나은 기능 추가



# 유지 보수 비용의 추이

<1970>
- 35 ~ 40 %

<1980>
- 40 ~ 60 %

<1990>
- 70 ~ 80 %

* 유지 보수비용은 앞으로 갈수록 더많은 비용이 들것이다.


# 유지 보수의 어려움

- 다른사람이 코딩한것을 이해하는것은 어려운일
- 개발 담당자에게 도움을 얻을수없음
- 기술 문서가없거나 엉암잉ㄴ 경우가 많다
- 대부분 소프트웨어어는 변경을 염두에 두고 설계하지 않는다.
- 유지보수는 인기 없는 일



# 유지보수의 개념

- 개발이 완료된 시점부터 폐기 처분될때까지 
소프트 웨어 사용기간 동안 계속적으로 수행되는 작업

* 현 시스템에 대한 이해 - > 수정 및 시험 


# 유지 보수의 형태

- 4가지 분류

    수리 유지보수 Corrective Maintenance
    - 발견된 오류 를 찾아 해결

    적응 유지보수 Adaptive Maintenance 
    - 새로운 하드웨어나 같은 환경변화를 반영 , 시스템 기능변화와는 관련이없다.

    완전화 유지보수 Perfective Maintenance 
    - 시스템 기능적 향상 

    예방 유지보수 Preventive Maintenance
    - 문서 갱신, 설명 추가 등 시스템의 유지보수성을 증가시키는것을 목표로 한다.



# 유지보수 행위의 분포

    완전화 유지보수: 50%
    적응 유지보수 : 15%
    수리 유지보수 : 21%
    예방 유지보수 : 4%


# 유지보수 문제를줄이는 방법

    사후 유지보수를 줄이는데 도움을 주는것

        - 고급코드
        - 더 좋은 시험 절차
        - 더 좋은 문서
        - 표준과 규정에 맞춘다

    변경 가능성에 대한 고려

        - 요구사항 분류 및 설계시 변경을 고려하고 구현한다.

    소프트웨어 구조에 대한 외부 평가

        - 변경 가능성 부분을 격리시킬 기회를 제공
    
    사용자 요구에 대한 세부조정

        - 완전화 보수를 줄일수 있다.
        - 요구분석 설계단계에서 프로토타이핑 기법과 좀더 강도 높은 사용자의 참여를통해 
            이루어 질 수 있다.

    코드의 수가 적으면 보수 필요성도 감소

        - 심플한 형태의 소스코드를 짜는것이 중요하다.



# 소프트웨어 유지 보수 형태

    시간에 의한 분류 

        -계획 
        -예방
        -응급
        -지연

    대상에 의한 분류

        -데이터/프로그램
        -도큐먼트
        -시스템

    사유에 의한 분류

        -수리
        -적응
        -완전화



# 유지보수의 문제 

    네가지 과제 

    - 소프트웨어의 에러 처리 ?
    - 개발끝난 소프트웨어를 변환 ?
    - 지금 까지 개발하는 소프트웨어가 목표에 맞지않으면 ? 
    - 지금부터 개발하는 소프트웨어 장래의 환경 변화에따라 대처하기 쉽도록 
    문제 와 해답의 양쪽에서 준비하는것은 ? 


# 유지 보수상의 제반 문제들 

    - 소프트 웨어는 다루기 어렵다.
    - 유지보수에 관한 요구정의를 명확히 표현할 기법이없다.
    - 잦은 변경 의뢰
    - 유지보수 비용의 불명확한 구분
    - 불완전한 OS
    - 체계화된 유지보수 기술 지원도구 거의없다.
    - 설계 단계에서 보수를 고려한 방법론,기법이 제안되어있지않다.
    - 유지보수를 위한 전용 문서의 부재
    - 규모가 커질수록 문서정리가 어렵다.
    - 문서 품질이 운영중인 SW와 달라질수있다.
    - 유지보수가 진행될수록 복잡해지는 소프트웨어 
    - 소프트웨어 수정 후 파급효과에 대한 대책의 부재
    - 타인이 작성한 코드를 다시 고치는 것은 힘든 과정이다.
    - 인수인계씨 커뮤니테이션의 문제 
    - 유지보수 정보의 관리의 부재 
    - 유지보수 비용 예측의 부정확
    - 유지보수 작업 관리 자체가 어렵다.
    - 유지보수 작업은 창조성이 없는 경우가 대부분이다.
    - 유지보수 작업 납기일이 짧다 .



# 유지보수 작업의 순서

* 기존 소프트웨어의 이해 
    - 시스템의 개요를 기술한 도큐먼트를 근거로 시스템이 기능명을택하여 전체개념 파악.


* 기존 소프트웨어의 수정 
    
* 신규 소프트웨어의 개발 

# 리그레션 테스트
- 변경부분과 영향을 주는 부분만 테스트한다.




# 소프트웨어 형상관리


SCM (Software Configuration Management)

- 소프트웨어의 개발 및 유지보수 과정에서 발생하는 각종 결과물들에 대한 관리 
- 계획,개발,운용을 종합하여 시스템 형상을 만듦
