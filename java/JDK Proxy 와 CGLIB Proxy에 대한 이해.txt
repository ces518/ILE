JDK Proxy 와 CGLIB Proxy에 대한 이해

Proxy의 핵심적인 기능은 메서드가 호출(invoke) 될때 이메서드를 가로채
우리가 원하는 특정기능들을 추가할수있도록 지원함.


JDK Proxy 

JDKProxy는 인터페이스에 대한 Proxy만을 지원하며 , 클래스에대한proxy를 지원할수없다.
때문에 JDK 프록시를 사용할경우 인터페이스 가 강제됨.

Target클래스에 Proxy 적용시 포인트컷 정보에따라 advice 되는 메서드와 그렇지않은 메서드가 존재

JDK 프록시사용시 Target클래스에 대한 메서드 호출시 JVM에 intercpet한뒤 advice의 invoke 메서드를 호출.
그 후 메서드가 advice되는 메서드인지 판단하게되는데
이과정에서 intecept한뒤 invoke메서드 호출시 jdk의 reflection을 이용하여 호출하게된다.
이는 proxy사용시 실행속도를 상당히 저하시키는원인이됨.

Spring 프레임워크에서 JDK Proxy를 사용하고자 한다면 ProxyFactory의 setProxyInterfaces() 메써드에 사용할 인터페이스를 전달하면 JDK Proxy를 이용할 수 있다. 
그러나 이 메써드를 통하여 인터페이스를 전달하지 않을 경우 기본적인 Proxy는 CGLIB Proxy가 된다.


CGLIB Proxy

CGLIB Proxy 또한 JDK Proxy처럼 Runtime시에 Target 메써드가 호출될 때 해당 메써드의 Advice적용 여부를 결정하게 된다. 
그러나 CGLIB는 메써드가 처음 호출 되었을때 동적으로 bytecode를 생성하여 이후 호출에서는 재사용하는 과정을 거치게 된다. 
이 같은 과정을 통하여 두번째 호출이후부터는 실행속도의 향상을 가져올 수 있는 방법을 사용하고 있다.

 CGLIB Proxy는 클래스에 대한 Proxy가 가능하다.



성능비교


Advised 메써드의 경우 JDK보다 CGLIB(Standard) Proxy를 사용할 경우 25%이상 더 빠른 것을 확인할 수 있다. 
Advised 메써드의 경우에는 25%정도이지만 다른 UnAdvised되는 메써드를 확인해 보면 그 차이는 상당히 크다는 것을 확인할 수 있다. 
CGLIB Proxy에 비해 JDK Proxy가 4배 이상 느린 것을 확인할 수 있다. 
우리들이 모든 Object에서 가지는 equals()와 hashCode()에서도 비슷한 결과가 나타난 것을 확인할 수 있다.

이 같은 결과가 나타나는 가장 큰 이유는 JDK Proxy가 UnAdvised 메써드임에도 불구하고 매번 자바의 reflection을 이용하여 Advice의 invoke 메써드를 호출하기 때문이다.


java relfection 보다 cglib의 성능이 뛰어남.
